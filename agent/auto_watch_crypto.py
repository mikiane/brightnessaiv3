from openai import OpenAI
import os
import json
from urllib.request import Request, urlopen
from urllib.error import URLError, HTTPError
import html
import logging
from logging.handlers import RotatingFileHandler
from datetime import datetime, timezone


LOG_PATH = "/home/michel/docs/watch_crypto.log"

def setup_logging():
  logger = logging.getLogger("watch_crypto")
  if logger.handlers:
    return logger
  logger.setLevel(logging.INFO)
  formatter = logging.Formatter(fmt="%(asctime)s %(levelname)s %(message)s", datefmt="%Y-%m-%d %H:%M:%S")
  stream_handler = logging.StreamHandler()
  stream_handler.setLevel(logging.INFO)
  stream_handler.setFormatter(formatter)
  logger.addHandler(stream_handler)
  try:
    os.makedirs(os.path.dirname(LOG_PATH), exist_ok=True)
    file_handler = RotatingFileHandler(LOG_PATH, maxBytes=2_000_000, backupCount=3)
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)
  except Exception as e:
    logger.warning(f"Impossible de cr√©er/ouvrir le fichier log {LOG_PATH}: {e}")
  return logger

log = setup_logging()
try:
  from dotenv import load_dotenv, find_dotenv
  load_dotenv(find_dotenv(), override=False)
except Exception:
  log.warning("python-dotenv non disponible; variables d'environnement uniquement.")

api_key = os.getenv("OPENAI_API_KEY")
if api_key:
  log.info("Cl√© OPENAI_API_KEY d√©tect√©e via env/.env")
else:
  log.warning("Aucune cl√© OPENAI_API_KEY d√©tect√©e; tentative d'initialisation par d√©faut")
client = OpenAI(api_key=api_key) if api_key else OpenAI()

def extract_response_text(resp):
  try:
    text = getattr(resp, "output_text", None)
    if isinstance(text, str) and text.strip():
      return text
  except Exception:
    pass
  try:
    output = getattr(resp, "output", None)
    if isinstance(output, list):
      parts = []
      for item in output:
        content = item.get("content") if isinstance(item, dict) else getattr(item, "content", None)
        if isinstance(content, list):
          for c in content:
            t = c.get("text") if isinstance(c, dict) else getattr(c, "text", None)
            if isinstance(t, str) and t:
              parts.append(t)
      if parts:
        return "\n".join(parts)
  except Exception:
    pass
  try:
    text_attr = getattr(resp, "text", None)
    if isinstance(text_attr, str) and text_attr.strip():
      return text_attr
  except Exception:
    pass
  try:
    return str(resp)
  except Exception:
    return ""

def send_email_via_brevo(brevo_api_key, subject, text_body, to_email, sender_email, sender_name):
  if not brevo_api_key:
    log.error("BREVO_API_KEY manquant: envoi email ignor√©.")
    return False
  url = "https://api.brevo.com/v3/smtp/email"
  html_body = f"<html><body><pre>{html.escape(text_body)}</pre></body></html>"
  payload = {
    "sender": {"name": sender_name, "email": sender_email},
    "to": [{"email": to_email}],
    "subject": subject,
    "textContent": text_body,
    "htmlContent": html_body
  }
  headers = {
    "api-key": brevo_api_key,
    "Content-Type": "application/json",
    "Accept": "application/json"
  }
  req = Request(url, data=json.dumps(payload).encode("utf-8"), headers=headers, method="POST")
  try:
    with urlopen(req) as resp:
      status = resp.getcode()
      if 200 <= status < 300:
        log.info("Email Brevo envoy√© avec succ√®s")
        return True
      log.error(f"Echec envoi email Brevo, status={status}")
      return False
  except HTTPError as e:
    try:
      body = e.read().decode("utf-8", errors="ignore")
    except Exception:
      body = ""
    log.exception(f"Erreur HTTP Brevo: {e.code} {body}")
    return False
  except URLError as e:
    log.error(f"Erreur r√©seau Brevo: {getattr(e, 'reason', e)}")
    return False
  except Exception as e:
    log.exception(f"Erreur inconnue Brevo: {e}")
    return False

today = datetime.now(timezone.utc).strftime("%Y-%m-%d")


response = client.responses.create(
  model="gpt-5",
  # cl√© pour d√©marrer "√† blanc" chaque jour
  store=False,  # <<< important
  tools=[{"type":"web_search"}],
  input=[
    {
      "role": "developer",
      "content": [
        {
          "type": "input_text",
          "text": (
            f"Tu es un expert en crypto. Nous sommes le {today} (UTC). Ignore tout contexte ant√©rieur. "
            "Tu DOIS utiliser web_search pour r√©cup√©rer les PRIX/ACTUS du jour "
            "et tu cites la date des donn√©es."
          )
        }
      ]
    },
    {
      "role": "user",
      "content": [
        {
          "type": "input_text",
          "text": "üéØ Contrat de la journ√©e Clarifier et s√©curiser les partenariats prioritaires (Nespresso, TEDFOOD), finaliser le code TEDAI Vienna (overdue), et assurer les rendez-vous m√©dias & partenaires (BFM, d√©jeuner, Ruis) pour maintenir l‚Äô√©lan des projets semestriels. üìå Projets & Actions üåê TED / TEDx / Conf√©rences Code d‚Äôacc√®s TEDAI Vienna (P1, overdue) Action : confirmer le code (801764) dans le doc public + transmettre aux participants. (~15 min) Appel TEDx Technion (11:30‚Äì12:00) Action : relire les 3 points cl√©s (format & calendrier) et pr√©parer t√©l√©phone. Email Nespresso (TEDxParis 2026) R√©pondre √† Nathalie Gonzalez avant midi : Bonjour Nathalie, merci pour ta franchise et le retour. Je comprends la priorisation 2026. Peut-on pr√©voir un court √©change (15-20 min) cette semaine pour explorer une option de visibilit√© limit√©e / partenariat technique qui s'int√®gre √† vos priorit√©s actuelles ? Quels cr√©neaux te conviennent ? ‚Äî Michel Email Andrea Grundelius (TEDFOOD 2027) R√©ponse courte √† envoyer : Merci Andrea ‚Äî bien not√©, je confirme l'enregistrement des dates de la semaine 36 (6‚Äì10 sept 2027). Email Maylis (Brightness ‚Äî minutes du 9 sept) V√©rifier et confirmer (ou corriger). R√©ponse : Merci Maylis ‚Äî j'ai lu les minutes, elles me semblent correctes / je propose une petite correction sur [X] si n√©cessaire. üíº Brightness / Partenariats & Business D√©jeuner Vincent Susplugas (12:30‚Äì14:00) Lieu : Gar√ßon ! ‚Äî apporter docs / pr√©parer points commerciaux. RDV Ruis (15:00‚Äì16:45) Pr√©parer brief et documents pertinents. üéôÔ∏è M√©dias & Interventions Pr√©pa BFM (17:30‚Äì19:30) Finaliser messages cl√©s, slides, notes. Intervention BFM (19:30‚Äì20:45) Tenue, micro, derni√®res notes. üßë‚Äçüíª Organisation & D√©veloppement perso Formation GTD + IA (P2) Avancer sur module, planifier plan d‚Äôaction. (60 min, cr√©neau 14:00‚Äì15:00). üõ†Ô∏è Perso & Logistique R√©cup√©rer sac Leica Beaumarchais (P1) (~30 min, avant 10:30). Arrosage plantes (P3) (15 min, 09:45‚Äì10:00 ou 21:00‚Äì21:15). Email Caroline (scooter) : suivre ou archiver. Email Julie Martinez (France 2040) : lecture non urgente, d√©placer en hebdo. V√©rifier : t√©l√©phone charg√©, powerbank, copies PDF TEDx/TEDFOOD sur smartphone. Pr√©parer tenue pro pour BFM."
        }
      ]
    }
  ],
  text={
    "format": {
      "type": "text"
    },
    "verbosity": "medium"
  },
  reasoning={
    "effort": "high",
    "summary": "auto"
  },
)
log.info("R√©ponse g√©n√©r√©e par le mod√®le gpt-5")

generated_text = extract_response_text(response)
if generated_text:
  log.info(f"Texte g√©n√©r√©: {min(len(generated_text), 200)} caract√®res (tronqu√© dans les logs)")
else:
  log.warning("Aucun texte g√©n√©r√© extrait de la r√©ponse")

brevo_api_key = os.getenv("BREVO_API_KEY")
sender_email = os.getenv("BREVO_SENDER_EMAIL", "no-reply@brightness.fr")
sender_name = os.getenv("BREVO_SENDER_NAME", "Brightness AI")
to_email = "michel@brightness.fr"
subject = "Veille Crypto"

_email_ok = send_email_via_brevo(
  brevo_api_key=brevo_api_key,
  subject=subject,
  text_body=generated_text,
  to_email=to_email,
  sender_email=sender_email,
  sender_name=sender_name,
)
log.info(f"Envoi email Brevo: {'OK' if _email_ok else 'ECHEC'}")