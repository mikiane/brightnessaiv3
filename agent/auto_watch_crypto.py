from openai import OpenAI
import os
import json
from urllib.request import Request, urlopen
from urllib.error import URLError, HTTPError
import html
import logging
from logging.handlers import RotatingFileHandler
from datetime import datetime, timezone


LOG_PATH = "/home/michel/docs/watch_crypto.log"

def setup_logging():
  logger = logging.getLogger("watch_crypto")
  if logger.handlers:
    return logger
  logger.setLevel(logging.INFO)
  formatter = logging.Formatter(fmt="%(asctime)s %(levelname)s %(message)s", datefmt="%Y-%m-%d %H:%M:%S")
  stream_handler = logging.StreamHandler()
  stream_handler.setLevel(logging.INFO)
  stream_handler.setFormatter(formatter)
  logger.addHandler(stream_handler)
  try:
    os.makedirs(os.path.dirname(LOG_PATH), exist_ok=True)
    file_handler = RotatingFileHandler(LOG_PATH, maxBytes=2_000_000, backupCount=3)
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)
  except Exception as e:
    logger.warning(f"Impossible de cr√©er/ouvrir le fichier log {LOG_PATH}: {e}")
  return logger

log = setup_logging()
try:
  from dotenv import load_dotenv, find_dotenv
  load_dotenv(find_dotenv(), override=False)
except Exception:
  log.warning("python-dotenv non disponible; variables d'environnement uniquement.")

api_key = os.getenv("OPENAI_API_KEY")
if api_key:
  log.info("Cl√© OPENAI_API_KEY d√©tect√©e via env/.env")
else:
  log.warning("Aucune cl√© OPENAI_API_KEY d√©tect√©e; tentative d'initialisation par d√©faut")
client = OpenAI(api_key=api_key) if api_key else OpenAI()

def extract_response_text(resp):
  try:
    text = getattr(resp, "output_text", None)
    if isinstance(text, str) and text.strip():
      return text
  except Exception:
    pass
  try:
    output = getattr(resp, "output", None)
    if isinstance(output, list):
      parts = []
      for item in output:
        content = item.get("content") if isinstance(item, dict) else getattr(item, "content", None)
        if isinstance(content, list):
          for c in content:
            t = c.get("text") if isinstance(c, dict) else getattr(c, "text", None)
            if isinstance(t, str) and t:
              parts.append(t)
      if parts:
        return "\n".join(parts)
  except Exception:
    pass
  try:
    text_attr = getattr(resp, "text", None)
    if isinstance(text_attr, str) and text_attr.strip():
      return text_attr
  except Exception:
    pass
  try:
    return str(resp)
  except Exception:
    return ""

def send_email_via_brevo(brevo_api_key, subject, text_body, to_email, sender_email, sender_name):
  if not brevo_api_key:
    log.error("BREVO_API_KEY manquant: envoi email ignor√©.")
    return False
  url = "https://api.brevo.com/v3/smtp/email"
  html_body = f"<html><body><pre>{html.escape(text_body)}</pre></body></html>"
  payload = {
    "sender": {"name": sender_name, "email": sender_email},
    "to": [{"email": to_email}],
    "subject": subject,
    "textContent": text_body,
    "htmlContent": html_body
  }
  headers = {
    "api-key": brevo_api_key,
    "Content-Type": "application/json",
    "Accept": "application/json"
  }
  req = Request(url, data=json.dumps(payload).encode("utf-8"), headers=headers, method="POST")
  try:
    with urlopen(req) as resp:
      status = resp.getcode()
      if 200 <= status < 300:
        log.info("Email Brevo envoy√© avec succ√®s")
        return True
      log.error(f"Echec envoi email Brevo, status={status}")
      return False
  except HTTPError as e:
    try:
      body = e.read().decode("utf-8", errors="ignore")
    except Exception:
      body = ""
    log.exception(f"Erreur HTTP Brevo: {e.code} {body}")
    return False
  except URLError as e:
    log.error(f"Erreur r√©seau Brevo: {getattr(e, 'reason', e)}")
    return False
  except Exception as e:
    log.exception(f"Erreur inconnue Brevo: {e}")
    return False

today = datetime.now(timezone.utc).strftime("%Y-%m-%d")


response = client.responses.create(
  model="gpt-5",
  # cl√© pour d√©marrer "√† blanc" chaque jour
  store=False,  # <<< important
  tools=[{"type":"web_search"}],
  input=[
    {
      "role": "developer",
      "content": [
        {
          "type": "input_text",
          "text": (
            f"Tu es un expert en crypto. Nous sommes le {today} (UTC). Ignore tout contexte ant√©rieur. "
            "Tu DOIS utiliser web_search pour r√©cup√©rer les PRIX/ACTUS du jour "
            "et tu cites la date des donn√©es."
          )
        }
      ]
    },
    {
      "role": "user",
      "content": [
        {
          "type": "input_text",
          "text": """
Developer: # R√¥le et Objectif Cr√©er un rapport synth√©tique, actionnable et strictement structur√© pour une strat√©gie HODL/swing crypto avec un maximum de 2 allers-retours par mois, uniquement sur les opportunit√©s les plus pertinentes.
Instructions
G√©n√©rer un rapport en fran√ßais clair et p√©dagogique, sous forme de texte facilement lisible (pas de JSON).
Structurer imp√©rativement le contenu par les sections suivantes :
Ethereum (ETH)
Bitcoin (BTC)
Solana (SOL)
Autres altcoins (1 ou 2, selon actualit√©)
Plan hebdomadaire synth√©tique
Risque macro/march√©
Adapter la structure d√©taill√©e pour chaque crypto selon les besoins ci-dessous, en restant dans un format texte structur√© par rubrique.
Toutes les valeurs num√©riques doivent appara√Ætre dans le rapport en respectant les formats requis : prix en USD, pourcentages, ratios gain/risque (float), etc.
Les ordres doivent √™tre formul√©s comme s‚Äôils devaient √™tre plac√©s directement sur un exchange, avec des niveaux de prix pr√©cis.
Sous-cat√©gories
ETH/BTC/SOL :
Inclure tendance macro, niveaux cl√©s supports/r√©sistances, signaux d‚Äôentr√©e d√©taill√©s (type, prix, confirmation), TP, SL (avec buffer), justification (technique et fondamentale), risque et potentiel (%), ratio R/R (float), effet de levier conseill√©.
Altcoins :
Maximum 2, selon l‚Äôactualit√©. Pr√©senter chaque actif par symbole et inclure breakout/TP/SL/justification/ratio dans un paragraphe clair.
Plan hebdo :
Synth√©tiser une liste concise et prioris√©e d‚Äôactions avec conditions de niveau prix, maximum 2 A/R par mois.
Macro risque :
Lister les √©v√©nements majeurs et indiquer toute alerte de volatilit√©/manipulation dans un encadr√©.
Contexte
Applicable pour une strat√©gie swing/HODL en crypto, principalement spot mais effet de levier jusqu‚Äô√† x2 possible.
En-dehors du scope : scalping/intraday, plus de 2 allers-retours par mois, signaux peu pertinents ou monnaies non list√©es.
√âtapes de raisonnement
Analyser les tendances et actualit√©s majeures.
S√©lectionner uniquement les signaux tr√®s pertinents pour chaque actif.
D√©taillez et justifiez chaque proposition d‚Äôordre selon les crit√®res d√©finis, en format texte.
Planification et v√©rification
V√©rifier la coh√©rence des niveaux de prix, ratios, justificatifs et la structure finale du texte.
S‚Äôassurer qu‚Äôaucune section ne soit manquante ou vide.
Limiter le nombre total d‚Äôallers-retours √† 2 par mois sur l‚Äôensemble du rapport.
Optimiser la clart√© et la concision √† chaque √©tape.
D√©buter par une checklist concise (3-7 points conceptuels) des t√¢ches √† r√©aliser avant tout traitement substantiel.
Apr√®s g√©n√©ration, conclure par 1-2 phrases validant le respect de tous les crit√®res de structure, format et limites. Corriger et r√©g√©n√©rer si besoin.
Format de sortie
G√©n√©rer la r√©ponse sous forme de texte structur√©, chaque section clairement identifi√©e et toutes les valeurs chiffr√©es explicitement indiqu√©es.
üìù Crypto Brief ‚Äì [Date] (UTC)
Prix spot (r√©f√©rence)
BTC : [prix]
ETH : [prix]
SOL : [prix]
LINK : [prix]
TON : [prix]
‚ö° Contexte march√©
ETF : [r√©sum√© flux/inflows/outflows]
R√©seaux : [upgrades majeurs, lancements produits]
Macro : [√©v√©nements macro √† venir ‚Äì CPI, FOMC, etc.]
üîë Niveaux cl√©s
BTC : supports / [y] / [z] ; r√©sistances / [y] / [z]
ETH : supports / [y] ; r√©sistances / [y] / [z]
SOL : supports / [y] ; r√©sistances / [y] / [z]
LINK : support ; r√©sistance [y]
TON : support ; r√©sistance [y]
üéØ Trades actionnables (max 2 / mois)
1) [Actif #1] (priorit√© #1)
Entr√©e : [type + prix + confirmation]
TP : [prix]
SL : [prix]
Risque : [-x%] | Potentiel : [+y%] | R/R ‚âà [valeur]
Levier : [spot / x1‚Äìx2]
Id√©e : [r√©sum√© technique + fondamental]
2) [Actif #2] (priorit√© #2)
Entr√©e : [type + prix + confirmation]
TP : [prix]
SL : [prix]
Risque : [-x%] | Potentiel : [+y%] | R/R ‚âà [valeur]
Levier : [spot / x1‚Äìx2]
Id√©e : [r√©sum√© technique + fondamental]
üëÄ Watchlist (pas d‚Äôex√©cution par d√©faut)
Actif 1 : [setup r√©sum√© + niveaux + R/R]
Actif 2 : [setup r√©sum√© + niveaux + R/R]
Actif 3 : [setup r√©sum√© + niveaux + R/R]
üö® Risques √† surveiller
Macro : [CPI, FOMC, etc.]
March√© : [expirations options/futures, ETF flows]
Volatilit√© : [fen√™tres de risque, fausses cassures
üëâ Plan hebdo : ex√©cuter uniquement les 2 setups principaux. Watchlist activ√©e seulement si un trade est annul√©/non d√©clench√©.
Contr√¥le de format strict
Toutes les informations exig√©es par le sch√©ma doivent √™tre pr√©sentes et correctement format√©es dans le texte, aucune section ne doit manquer."""
        }
      ]
    }
  ],
  text={
    "format": {
      "type": "text"
    },
    "verbosity": "medium"
  },
  reasoning={
    "effort": "high",
    "summary": "auto"
  },
)
log.info("R√©ponse g√©n√©r√©e par le mod√®le gpt-5")

generated_text = extract_response_text(response)
if generated_text:
  log.info(f"Texte g√©n√©r√©: {min(len(generated_text), 200)} caract√®res (tronqu√© dans les logs)")
else:
  log.warning("Aucun texte g√©n√©r√© extrait de la r√©ponse")

brevo_api_key = os.getenv("BREVO_API_KEY")
sender_email = os.getenv("BREVO_SENDER_EMAIL", "no-reply@brightness.fr")
sender_name = os.getenv("BREVO_SENDER_NAME", "Brightness AI")
to_email = "michel@brightness.fr"
subject = "Veille Crypto"

_email_ok = send_email_via_brevo(
  brevo_api_key=brevo_api_key,
  subject=subject,
  text_body=generated_text,
  to_email=to_email,
  sender_email=sender_email,
  sender_name=sender_name,
)
log.info(f"Envoi email Brevo: {'OK' if _email_ok else 'ECHEC'}")